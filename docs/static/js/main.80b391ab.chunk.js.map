{"version":3,"sources":["components/Error.js","components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["Error","mensaje","className","AddCategory","setCategories","useState","error","setError","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","divRoot","document","getElementById","ReactDOM","render"],"mappings":"uMAceA,EAZD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACb,OACI,8BACI,mBACIC,UAAU,qBADd,SAGKD,OCyCFE,EA7CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACrB,EAA0BC,oBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAmBA,OACE,gCACGH,EACC,cAAC,EAAD,CAAOL,QAAQ,iEACb,KACJ,sBAAMS,SAlBW,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC7BV,GAAc,SAACW,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,IACdF,GAAS,IAETA,GAAS,IAUT,SACE,uBACEL,UAAU,gCACVc,KAAK,OACLC,MAAOT,EACPU,SA3BkB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QA2BjBG,YAAY,yB,+BCjCTC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAIbC,EAJa,iDAIoCC,UAAWH,GAJ/C,+DAKAI,MAAMF,GALN,cAKbG,EALa,gBAMIA,EAAKC,OANT,uBAMXC,EANW,EAMXA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAkBZM,GAlBY,4CAAH,sDCYLO,EAdK,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAE1B,OACI,sBACItB,UAAU,2DADd,UAGI,qBAAKoC,IAAKd,EAAKe,IAAKL,IACpB,4BAAIA,QCoBDM,EA1BC,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SAEhB,ECDwB,SAAEA,GAE1B,MAA0BjB,mBAAS,CAC/BwB,KAAM,GACNY,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfDC,qBAAU,WACRvB,EAASC,GACRuB,MAAM,SAAAC,GACJC,YAAW,WAETJ,EAAS,CACNd,KAAMiB,EACNL,SAAS,MAGX,UAEH,CAACnB,IAGEoB,EDrB0BM,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaY,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIvC,UAAU,mBAAd,SAAmCoB,IAClCmB,GAAW,mBAAGvC,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAGYiC,EAAOJ,KAAM,SAAAC,GAAG,OAEZ,aADA,CACC,EAAD,eAEQA,GADGA,EAAIC,aEsB5BgB,EAnCM,WAEjB,MAAoC5C,mBAAS,IAA7C,mBAAOU,EAAP,KAAmBX,EAAnB,KAKA,OACI,qBAAKF,UAAU,oCAAf,SACI,sBAAKA,UAAU,2BAAf,UACI,oBAAIA,UAAU,8CAAd,0BACA,cAAC,EAAD,CACIE,cAAeA,IAEnB,uBAOQW,EAAWgB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCrB/B4B,G,MAAUC,SAASC,eAAe,SACxCC,IAASC,OAAO,cAAC,EAAD,IAAiBJ,K","file":"static/js/main.80b391ab.chunk.js","sourcesContent":["import React from 'react'\n\nconst Error = ( {mensaje} ) => {\n    return (\n        <div>\n            <p \n                className=\"alert alert-danger\"\n            >\n                {mensaje}\n            </p>\n        </div>\n    )\n}\n\nexport default Error\n","import React, { useState } from \"react\";\nimport Error from \"./Error\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [error, setError] = useState(false);\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n      setError(false);\n    } else {\n      setError(true);\n      return;\n    }\n  };\n\n  return (\n    <div>\n      {error ? (\n        <Error mensaje=\"Campo vacÃ­o o no se han agregado al menos dos caracteres.\" />\n      ) : null}\n      <form onSubmit={handleSubmit}>\n        <input\n          className=\"form-control p-3 rounded-pill\"\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Buscar gifs...\"\n        />\n      </form>\n    </div>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n\n}\n\nexport default AddCategory;\n","\n\n\n\nexport const getGifs = async ( category ) => {\n\n    // api.giphy.com/v1/gifs/search?q=Rick and Morty&limit=10&api_key=gkhsLHR49YXapUod7mfJCmsWBzph0Mvq\n    // gkhsLHR49YXapUod7mfJCmsWBzph0Mvq\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=gkhsLHR49YXapUod7mfJCmsWBzph0Mvq`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    //console.log(  data  );\n\n    const gifs = data.map(img =>{\n        return {\n            id : img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }\n    });\n    \n\n    return gifs;\n    // setImages(gifs);\n\n\n}","import React from 'react'\n\nconst GifGridItem = ({ title, url}) => {\n    // console.log(id, title, url);\n    return (\n        <div\n            className=\"card animate__animated animate__fadeIn animate__delay-1s\"\n        >\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n\n            \n        </div>\n    )\n}\n\nexport default GifGridItem\n","import { useFetchGifs } from \"../hooks/useFetchGifs\"\nimport GifGridItem from \"./GifGridItem\";\n\nconst GifGrid = ( { category } ) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n    \n    return (\n        <>\n            <h3 className=\"alert alert-info\">{ category }</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\n            <div className=\"card-grid\">\n  \n                    {\n                        images.map(  img =>(\n                            //<li key={id}>{title}</li>\n                            <GifGridItem \n                                key = {img.id}\n                                {...img}\n                            />\n                        ))\n                    } \n                \n\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading:true, \n    });\n\n   useEffect(()=>{\n     getGifs( category )\n     .then( imgs => {\n        setTimeout(() => {\n            \n          setState({\n             data: imgs,\n             loading: false\n          });\n\n        }, 1000);\n\n   })}, [category] )\n\n\n    return state; //data: [] y el loading: true\n\n\n\n}\n","import React, { useState } from 'react'\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n        \n    const [categories, setCategories] = useState([\n        // 'Samurai X', 'Dragon Ball', 'Digimon'\n    ]);\n\n    \n    return (\n        <div className=\"animate__animated animate__fadeIn\">\n            <div className=\"container main-container\">\n                <h2 className=\"display-3 animate__animated animate__bounce\">GifExpertApp</h2>\n                <AddCategory \n                    setCategories={setCategories}\n                />\n                <hr/>\n\n\n                {\n                    /* categories.map( category =>(\n                        <li key={category}> {category} </li>\n                    )) */\n                        categories.map( category=>(\n                            <GifGrid \n                                key={category}\n                                category={category}\n                            />\n                        ))\n\n                }\n\n            </div>\n        </div>\n    )\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nconst divRoot = document.getElementById('root');\nReactDOM.render(<GifExpertApp />,divRoot);"],"sourceRoot":""}